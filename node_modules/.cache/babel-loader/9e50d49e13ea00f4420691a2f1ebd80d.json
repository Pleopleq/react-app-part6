{"ast":null,"code":"var _jsxFileName = \"/home/pleq/Documents/learningReact/part6/src/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport personService from './services/persons';\nimport PrintNumbers from './components/PrintNumbers';\nimport SearchBar from './components/SearchBar';\nimport ContactForm from './components/ContactForm';\n\nconst Notification = ({\n  message,\n  className\n}) => {\n  if (message === null) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: className,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  }, message);\n};\n\nconst App = () => {\n  useEffect(() => {\n    personService.getAll().then(response => {\n      setPersons(response.data);\n    });\n  }, []);\n  const [persons, setPersons] = useState([]);\n  const [newFilter, setNewFilter] = useState('');\n  const [newName, setNewName] = useState('');\n  const [newPhoneNum, setNewPhoneNum] = useState('');\n  const [successMessage, setSuccessMessage] = useState(null);\n  const [failMessage, setFailMessage] = useState(null); //Search bar//\n\n  let contactsToShow = persons;\n  const searchQuery = newFilter;\n  const searchQueryToUpper = searchQuery.charAt(0).toUpperCase() + searchQuery.substring(1);\n  const filterPersons = contactsToShow.filter(el => el.name.includes(searchQueryToUpper));\n  contactsToShow = filterPersons; //Search bar //\n\n  const handleContactChange = event => {\n    setNewName(event.target.value);\n  };\n\n  const handlePhoneChange = event => {\n    setNewPhoneNum(event.target.value);\n  };\n\n  const handleFilterChange = event => {\n    setNewFilter(event.target.value);\n  };\n\n  const handleDeleteButton = event => {\n    const contactSelected = event.target.id;\n    const filteredContact = personService.getOneById(contactSelected, persons);\n    const result = window.confirm(`Are you sure you want to delete ${filteredContact[0].name}`);\n\n    if (result) {\n      personService.deleteContact(filteredContact[0].id).then(response => {\n        personService.getAll().then(response => {\n          setPersons(response.data);\n        });\n      }).catch(error => {\n        console.log(error);\n        setFailMessage(`\n                    Information of ${filteredContact[0].name} has already been removed from the server\n                    `);\n        personService.getAll().then(response => {\n          setPersons(response.data);\n        });\n        setTimeout(() => {\n          setFailMessage(null);\n        }, 4000);\n      });\n    }\n  };\n\n  const AddNumber = event => {\n    event.preventDefault();\n    const newContactObj = {\n      name: newName,\n      number: newPhoneNum\n    };\n    const onlyNames = persons.map(nameArr => nameArr.name);\n\n    if (onlyNames.indexOf(newName) > -1) {\n      const result = window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`);\n\n      if (result) {\n        const replaceOld = persons.filter(person => person.name === newName);\n        personService.updateContact(replaceOld[0].id, newContactObj).then(response => {\n          personService.getAll().then(response => {\n            setPersons(response.data);\n            setNewName('');\n            setNewPhoneNum('');\n          });\n        });\n      }\n    } else {\n      personService.create(newContactObj).then(response => {\n        setSuccessMessage(`${response.data.name} added to the contact list!`);\n        setTimeout(() => {\n          setSuccessMessage(null);\n        }, 4000);\n        setPersons(persons.concat(response.data));\n        setNewName('');\n        setNewPhoneNum('');\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  }, \"Phonebook\"), /*#__PURE__*/React.createElement(Notification, {\n    message: successMessage,\n    className: 'success-alert',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Notification, {\n    message: failMessage,\n    className: 'fail-alert',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(SearchBar, {\n    value: newFilter,\n    onChange: handleFilterChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }\n  }, \"Add a new contact\"), /*#__PURE__*/React.createElement(ContactForm, {\n    valueName: newName,\n    onChangeName: handleContactChange,\n    valueNumber: newPhoneNum,\n    onChangeNum: handlePhoneChange,\n    onSubmit: AddNumber,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }, \"Numbers\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  }, contactsToShow.map((person, index) => /*#__PURE__*/React.createElement(PrintNumbers, {\n    contact: person.name,\n    phone: person.number,\n    onClick: handleDeleteButton,\n    key: index,\n    id: person.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }\n  }))));\n};\n\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }\n}), document.getElementById('root'));\nexport default App;","map":{"version":3,"sources":["/home/pleq/Documents/learningReact/part6/src/index.js"],"names":["React","useState","useEffect","ReactDOM","personService","PrintNumbers","SearchBar","ContactForm","Notification","message","className","App","getAll","then","response","setPersons","data","persons","newFilter","setNewFilter","newName","setNewName","newPhoneNum","setNewPhoneNum","successMessage","setSuccessMessage","failMessage","setFailMessage","contactsToShow","searchQuery","searchQueryToUpper","charAt","toUpperCase","substring","filterPersons","filter","el","name","includes","handleContactChange","event","target","value","handlePhoneChange","handleFilterChange","handleDeleteButton","contactSelected","id","filteredContact","getOneById","result","window","confirm","deleteContact","catch","error","console","log","setTimeout","AddNumber","preventDefault","newContactObj","number","onlyNames","map","nameArr","indexOf","replaceOld","person","updateContact","create","concat","index","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport personService from './services/persons'\nimport PrintNumbers from './components/PrintNumbers'\nimport SearchBar from './components/SearchBar'\nimport ContactForm from './components/ContactForm'\n\nconst Notification = ({message, className}) => {\n    if(message === null){\n        return null\n    }\n    return (\n        <div className={className}>\n            {message}\n        </div>\n    )\n}\n\nconst App = () =>{\n\n   useEffect(() =>{\n    personService\n       .getAll()\n       .then(response => {\n        setPersons(response.data);\n       })\n   }, [])\n    const [ persons, setPersons] = useState([]);\n    const [ newFilter , setNewFilter] = useState('');\n    const [ newName, setNewName] = useState('');\n    const [ newPhoneNum, setNewPhoneNum] = useState('');\n    const [ successMessage, setSuccessMessage] = useState(null);\n    const [ failMessage, setFailMessage] = useState(null);\n\n    //Search bar//\n\n    let contactsToShow = persons;\n    const searchQuery = newFilter;\n    const searchQueryToUpper = searchQuery.charAt(0).toUpperCase() + searchQuery.substring(1);\n\n    const filterPersons = contactsToShow.filter(el => el.name.includes(searchQueryToUpper));\n    contactsToShow = filterPersons;\n\n    //Search bar //\n\n    const handleContactChange = event =>{\n        setNewName(event.target.value);\n    }\n\n    const handlePhoneChange =  event =>{\n        setNewPhoneNum(event.target.value);\n    }\n\n    const handleFilterChange = event =>{\n        setNewFilter(event.target.value);\n    }\n\n    const handleDeleteButton = (event) =>{\n        const contactSelected = event.target.id;\n        const filteredContact = personService.getOneById(contactSelected, persons)\n        const result = window.confirm(`Are you sure you want to delete ${filteredContact[0].name}`)\n            if(result){\n                personService\n                .deleteContact(filteredContact[0].id)\n                .then(response =>{\n                    personService\n                    .getAll()\n                    .then(response => {\n                    setPersons(response.data);\n                    })\n                })\n                .catch(error =>{\n                    console.log(error)\n                    setFailMessage(`\n                    Information of ${filteredContact[0].name} has already been removed from the server\n                    `)\n                    personService\n                    .getAll().then(response => {setPersons(response.data);})\n                    setTimeout(() => {\n                        setFailMessage(null)\n                        \n                    }, 4000);\n                })\n        }\n    }\n    \n\n    const AddNumber = (event) =>{\n        event.preventDefault();\n\n        const newContactObj = {\n            name: newName,\n            number: newPhoneNum\n        }\n\n        const onlyNames = persons.map(nameArr => nameArr.name);\n\n        if(onlyNames.indexOf(newName) > -1 ){\n            const result = window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)\n            if(result){\n                const replaceOld = persons.filter(person => person.name === newName);\n                personService\n                .updateContact(replaceOld[0].id, newContactObj)\n                .then(response =>{\n                        personService\n                        .getAll()\n                        .then(response => {\n                        setPersons(response.data);\n                        setNewName('');\n                        setNewPhoneNum('');\n                    })\n                })\n            }\n        } else {\n            personService\n            .create(newContactObj)\n            .then(response =>{\n                setSuccessMessage(`${response.data.name} added to the contact list!`)\n                setTimeout(() => {\n                    setSuccessMessage(null)\n                }, 4000);\n                setPersons(persons.concat(response.data));\n                setNewName('');\n                setNewPhoneNum('');\n            })\n        }\n    }\n\n    return(\n        <div>\n            <h1>Phonebook</h1>\n            <Notification message={successMessage} className={'success-alert'}></Notification>\n            <Notification message={failMessage} className={'fail-alert'}></Notification>\n            <SearchBar value={newFilter} onChange={handleFilterChange}/>\n\n            <h2>Add a new contact</h2>\n            \n            <ContactForm valueName={newName} \n            onChangeName={handleContactChange}\n            valueNumber={newPhoneNum}\n            onChangeNum={handlePhoneChange}\n            onSubmit={AddNumber}/>\n\n            <h2>Numbers</h2>\n            <ul>\n                {contactsToShow.map((person, index)=>\n                <PrintNumbers contact={person.name} phone={person.number} onClick={handleDeleteButton} key={index} id={person.id}/>\n            )}\n            </ul>\n        </div>\n    )\n}\n\nReactDOM.render(\n    <App/>,\n  document.getElementById('root')\n);\n\n\nexport default App"]},"metadata":{},"sourceType":"module"}