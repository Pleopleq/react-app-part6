{"version":3,"sources":["services/persons.js","components/PrintNumbers.js","components/SearchBar.js","components/ContactForm.js","components/Notification.js","index.js"],"names":["baseURL","axios","get","id","allContacts","filter","contact","parseInt","newContactObj","post","delete","updatedObj","put","PrintNumbers","phone","index","onClick","key","SearchBar","value","onChange","ContactForm","onSubmit","valueName","onChangeName","valueNumber","onChangeNum","type","Notification","message","className","App","useEffect","personService","then","response","setPersons","data","useState","persons","newFilter","setNewFilter","newName","setNewName","newPhoneNum","setNewPhoneNum","successMessage","setSuccessMessage","failMessage","setFailMessage","contactsToShow","searchQuery","searchQueryToUpper","charAt","toUpperCase","substring","filterPersons","el","name","includes","handleDeleteButton","event","contactSelected","target","filteredContact","window","confirm","catch","error","console","log","setTimeout","preventDefault","number","map","nameArr","indexOf","replaceOld","person","concat","ReactDOM","render","document","getElementById"],"mappings":"mOAEMA,EAAU,+CAwBD,EAtBA,WACX,OAAOC,IAAMC,IAAIF,IAqBN,EAlBI,SAACG,EAAIC,GAEpB,OADmBA,EAAYC,QAAO,SAAAC,GAAO,OAAIA,EAAQH,KAAOI,SAASJ,OAiB9D,EAbA,SAAAK,GACX,OAAOP,IAAMQ,KAAKT,EAASQ,IAYhB,EATO,SAACL,GACnB,OAAOF,IAAMS,OAAN,UAAgBV,EAAhB,YAA2BG,KAQvB,EALO,SAACA,EAAIQ,GACvB,OAAOV,IAAMW,IAAN,UAAaZ,EAAb,YAAwBG,GAAMQ,IChB1BE,EAJM,SAAC,GAA4C,IAA3CP,EAA0C,EAA1CA,QAASQ,EAAiC,EAAjCA,MAAQC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,QAAWb,EAAO,EAAPA,GACtD,OAAO,wBAAIc,IAAKF,GAAT,IAAkBT,EAAlB,MAA8BQ,EAA9B,IAAqC,4BAAQE,QAASA,EAASb,GAAIA,GAA9B,YCSjCe,EAVG,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,SACvB,OACC,6BACD,kDADC,IAC8B,2BAC/BD,MAAOA,EACPC,SAAUA,MCcCC,EAnBK,SAAC,GAAkE,IAAjEC,EAAgE,EAAhEA,SAAUC,EAAsD,EAAtDA,UAAWC,EAA2C,EAA3CA,aAAcC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,YAClE,OACA,0BAAMJ,SAAUA,GACZ,sCACU,2BAAOH,MAAOI,EAChBH,SAAUI,IAFlB,UAIW,2BAAOL,MAAOM,EACjBL,SAAUM,IAEd,6BACI,4BAAQC,KAAK,UAAb,WCADC,EAXM,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,UAC5B,OAAe,OAAZD,EACQ,KAGP,yBAAKC,UAAWA,GACXD,ICEPE,EAAM,WAETC,qBAAU,WACTC,IAEIC,MAAK,SAAAC,GACLC,EAAWD,EAASE,WAEtB,IARW,MAUkBC,mBAAS,IAV3B,mBAULC,EAVK,KAUIH,EAVJ,OAWuBE,mBAAS,IAXhC,mBAWLE,EAXK,KAWOC,EAXP,OAYkBH,mBAAS,IAZ3B,mBAYLI,EAZK,KAYIC,EAZJ,OAa0BL,mBAAS,IAbnC,mBAaLM,EAbK,KAaQC,EAbR,OAcgCP,mBAAS,MAdzC,mBAcLQ,EAdK,KAcWC,EAdX,OAe0BT,mBAAS,MAfnC,mBAeLU,EAfK,KAeQC,EAfR,KAmBTC,EAAiBX,EACfY,EAAcX,EACdY,EAAqBD,EAAYE,OAAO,GAAGC,cAAgBH,EAAYI,UAAU,GAEjFC,EAAgBN,EAAe7C,QAAO,SAAAoD,GAAE,OAAIA,EAAGC,KAAKC,SAASP,MACnEF,EAAiBM,EAIjB,IAYMI,EAAqB,SAACC,GACxB,IAAMC,EAAkBD,EAAME,OAAO5D,GAC/B6D,EAAkB/B,EAAyB6B,EAAiBvB,GACnD0B,OAAOC,QAAP,0CAAkDF,EAAgB,GAAGN,QAE5EzB,EACe+B,EAAgB,GAAG7D,IACjC+B,MAAK,SAAAC,GACFF,IAECC,MAAK,SAAAC,GACNC,EAAWD,EAASE,YAGvB8B,OAAM,SAAAC,GACHC,QAAQC,IAAIF,GACZnB,EAAe,wCAAD,OACGe,EAAgB,GAAGN,KADtB,oEAIdzB,IACUC,MAAK,SAAAC,GAAaC,EAAWD,EAASE,SAEhDkC,YAAW,WACPtB,EAAe,QAEhB,SA+CnB,OACI,6BACI,yCACA,kBAAC,EAAD,CAAcpB,QAASiB,EAAgBhB,UAAW,kBAClD,kBAAC,EAAD,CAAcD,QAASmB,EAAalB,UAAW,eAC/C,kBAAC,EAAD,CAAWX,MAAOqB,EAAWpB,SAlFV,SAAAyC,GACvBpB,EAAaoB,EAAME,OAAO5C,UAmFtB,iDAEA,kBAAC,EAAD,CAAaI,UAAWmB,EACxBlB,aA/FoB,SAAAqC,GACxBlB,EAAWkB,EAAME,OAAO5C,QA+FpBM,YAAamB,EACblB,YA7FmB,SAAAmC,GACvBhB,EAAegB,EAAME,OAAO5C,QA6FxBG,SAtDU,SAACuC,GACfA,EAAMW,iBAEN,IAAMhE,EAAgB,CAClBkD,KAAMhB,EACN+B,OAAQ7B,GAKZ,GAFkBL,EAAQmC,KAAI,SAAAC,GAAO,OAAIA,EAAQjB,QAEpCkB,QAAQlC,IAAY,GAE7B,GADeuB,OAAOC,QAAP,UAAkBxB,EAAlB,2EACL,CACN,IAAMmC,EAAatC,EAAQlC,QAAO,SAAAyE,GAAM,OAAIA,EAAOpB,OAAShB,KAC5DT,EACe4C,EAAW,GAAG1E,GAAIK,GAChC0B,MAAK,SAAAC,GACEF,IAECC,MAAK,SAAAC,GACNC,EAAWD,EAASE,MACpBM,EAAW,IACXE,EAAe,gBAK3BZ,EACQzB,GACP0B,MAAK,SAAAC,GACFY,EAAkB,GAAD,OAAIZ,EAASE,KAAKqB,KAAlB,gCACjBa,YAAW,WACPxB,EAAkB,QACnB,KACHX,EAAWG,EAAQwC,OAAO5C,EAASE,OACnCM,EAAW,IACXE,EAAe,UAoBnB,uCACA,4BACKK,EAAewB,KAAI,SAACI,EAAQ/D,GAAT,OACpB,kBAAC,EAAD,CAAcT,QAASwE,EAAOpB,KAAM5C,MAAOgE,EAAOL,OAAQzD,QAAS4C,EAAoB3C,IAAKF,EAAOZ,GAAI2E,EAAO3E,WAO9H6E,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SAIXpD,c","file":"static/js/main.6f437ac8.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst baseURL = 'https://warm-tor-69264.herokuapp.com/persons';\n\nconst getAll = () =>{\n    return axios.get(baseURL);\n}\n\nconst getOneById = (id, allContacts) =>{\n    const filterById = allContacts.filter(contact => contact.id === parseInt(id))\n    return filterById\n}\n\nconst create = newContactObj => {\n    return axios.post(baseURL, newContactObj);\n}\n\nconst deleteContact = (id) =>{\n    return axios.delete(`${baseURL}/${id}`);\n}\n\nconst updateContact = (id, updatedObj) =>{\n    return axios.put(`${baseURL}/${id}`, updatedObj)\n}\n\n\nexport default {\n    getAll: getAll,\n    getOneById: getOneById,\n    create: create,\n    deleteContact: deleteContact,\n    updateContact: updateContact\n}","import React from 'react'\n\nconst PrintNumbers = ({contact, phone,  index, onClick,   id}) =>{\n    return <li key={index}> {contact} - {phone} <button onClick={onClick} id={id}>Delete</button></li> \n}\n\nexport default PrintNumbers","import React from 'react'\n\nconst SearchBar = ({value, onChange}) =>{\n    return (\n     <div>\n    <label>Filter by name:</label> <input\n    value={value} \n    onChange={onChange}/>\n    </div>\n    )\n}\n\nexport default SearchBar","import React from 'react'\n\nconst ContactForm = ({onSubmit, valueName, onChangeName, valueNumber, onChangeNum}) =>{\n    return (\n    <form onSubmit={onSubmit}> \n        <div>\n            name: <input value={valueName}\n                onChange={onChangeName}\n            />\n            phone: <input value={valueNumber}\n                onChange={onChangeNum}\n            />\n            <div>\n                <button type='submit'>Add</button>\n            </div>\n        </div>\n    </form>\n    )\n}\n\n\nexport default ContactForm","import React from 'react'\n\nconst Notification = ({message, className}) => {\n    if(message === null){\n        return null\n    }\n    return (\n        <div className={className}>\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import React, {useState, useEffect} from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport personService from './services/persons'\nimport PrintNumbers from './components/PrintNumbers'\nimport SearchBar from './components/SearchBar'\nimport ContactForm from './components/ContactForm'\nimport Notification from './components/Notification'\n\n\nconst App = () =>{\n    \n   useEffect(() =>{\n    personService\n       .getAll()\n       .then(response => {\n        setPersons(response.data);\n       })\n   }, [])\n\n    const [ persons, setPersons] = useState([]);\n    const [ newFilter , setNewFilter] = useState('');\n    const [ newName, setNewName] = useState('');\n    const [ newPhoneNum, setNewPhoneNum] = useState('');\n    const [ successMessage, setSuccessMessage] = useState(null);\n    const [ failMessage, setFailMessage] = useState(null);\n\n    //Search bar//\n\n    let contactsToShow = persons;\n    const searchQuery = newFilter;\n    const searchQueryToUpper = searchQuery.charAt(0).toUpperCase() + searchQuery.substring(1);\n\n    const filterPersons = contactsToShow.filter(el => el.name.includes(searchQueryToUpper));\n    contactsToShow = filterPersons;\n\n    //Search bar //\n\n    const handleContactChange = event =>{\n        setNewName(event.target.value);\n    }\n\n    const handlePhoneChange =  event =>{\n        setNewPhoneNum(event.target.value);\n    }\n\n    const handleFilterChange = event =>{\n        setNewFilter(event.target.value);\n    }\n\n    const handleDeleteButton = (event) =>{\n        const contactSelected = event.target.id;\n        const filteredContact = personService.getOneById(contactSelected, persons)\n        const result = window.confirm(`Are you sure you want to delete ${filteredContact[0].name}`)\n            if(result){\n                personService\n                .deleteContact(filteredContact[0].id)\n                .then(response =>{\n                    personService\n                    .getAll()\n                    .then(response => {\n                    setPersons(response.data);\n                    })\n                })\n                .catch(error =>{\n                    console.log(error)\n                    setFailMessage(`\n                    Information of ${filteredContact[0].name} has already been removed from the server\n                    `)\n                    //HTTP Call to refresh the contacts\n                    personService\n                    .getAll().then(response => {setPersons(response.data)})\n    \n                    setTimeout(() => {\n                        setFailMessage(null)\n                        \n                    }, 4000);\n                })\n        }\n    }\n    \n\n    const AddNumber = (event) =>{\n        event.preventDefault();\n\n        const newContactObj = {\n            name: newName,\n            number: newPhoneNum\n        }\n\n        const onlyNames = persons.map(nameArr => nameArr.name);\n\n        if(onlyNames.indexOf(newName) > -1 ){\n            const result = window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)\n            if(result){\n                const replaceOld = persons.filter(person => person.name === newName);\n                personService\n                .updateContact(replaceOld[0].id, newContactObj)\n                .then(response =>{\n                        personService\n                        .getAll()\n                        .then(response => {\n                        setPersons(response.data);\n                        setNewName('');\n                        setNewPhoneNum('');\n                    })\n                })\n            }\n        } else {\n            personService\n            .create(newContactObj)\n            .then(response =>{\n                setSuccessMessage(`${response.data.name} added to the contact list!`)\n                setTimeout(() => {\n                    setSuccessMessage(null)\n                }, 4000);\n                setPersons(persons.concat(response.data));\n                setNewName('');\n                setNewPhoneNum('');\n            })\n        }\n    }\n\n    return(\n        <div>\n            <h1>Phonebook</h1>\n            <Notification message={successMessage} className={'success-alert'}></Notification>\n            <Notification message={failMessage} className={'fail-alert'}></Notification>\n            <SearchBar value={newFilter} onChange={handleFilterChange}/>\n\n            <h2>Add a new contact</h2>\n            \n            <ContactForm valueName={newName} \n            onChangeName={handleContactChange}\n            valueNumber={newPhoneNum}\n            onChangeNum={handlePhoneChange}\n            onSubmit={AddNumber}/>\n\n            <h2>Numbers</h2>\n            <ul>\n                {contactsToShow.map((person, index)=>\n                <PrintNumbers contact={person.name} phone={person.number} onClick={handleDeleteButton} key={index} id={person.id}/>\n            )}\n            </ul>\n        </div>\n    )\n}\n\nReactDOM.render(\n    <App/>,\n  document.getElementById('root')\n);\n\n\nexport default App"],"sourceRoot":""}